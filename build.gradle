plugins {
  id 'java'
  id 'java-base'
  id 'java-library'
  id 'maven-publish'
  id("io.papermc.paperweight.userdev") version "1.5.5"
  id("xyz.jpenilla.run-paper") version "2.1.0"
  id('com.github.johnrengelman.shadow') version "8.1.1"
}


group = "de.timesnake"
version = '3.3.0'
var projectId = 52

repositories {
  mavenLocal()
  mavenCentral()
  maven {
    url 'https://papermc.io/repo/repository/maven-public/'
  }
  maven {
    url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
  }
  maven {
    url "https://git.timesnake.de/api/v4/groups/7/-/packages/maven"
    name "TimeSnake"
    credentials {
      username = timesnakeUser
      password = timesnakePassword
    }
  }
}

dependencies {
  implementation "com.moandjiezana.toml:toml4j:0.7.3-SNAPSHOT"
  implementation "xyz.jpenilla:reflection-remapper:0.1.0-SNAPSHOT"

  implementation "de.timesnake:library-entities:2.+"
  implementation "de.timesnake:library-packets:2.+"

  implementation "de.timesnake:library-network:1.+"
  implementation "de.timesnake:library-commands:1.+"
  implementation "de.timesnake:library-permissions:1.+"
  implementation "de.timesnake:library-basic:1.+"
  implementation "de.timesnake:library-chat:1.+"

  implementation "com.google.code.gson:gson:2.10.1"

  compileOnly "de.timesnake:database-bukkit:2.+"
  compileOnly "de.timesnake:database-api:2.+"

  compileOnly "de.timesnake:channel-bukkit:4.+"
  compileOnly "de.timesnake:channel-api:4.+"

  compileOnly "org.freemarker:freemarker:2.3.31"

  paperweight.paperDevBundle("1.20.1-R0.1-SNAPSHOT")

  testImplementation platform('org.junit:junit-bom:5.10.0')
  testImplementation 'org.junit.jupiter:junit-jupiter'

  testImplementation "de.timesnake:channel-bukkit:4.+"
  testImplementation "de.timesnake:channel-api:4.+"
}

configurations.configureEach {
  resolutionStrategy.dependencySubstitution {
    if (project.parent != null) {
      substitute module("de.timesnake:database-bukkit") using project(":database-bukkit")
      substitute module("de.timesnake:database-api") using project(":database-api")

      substitute module("de.timesnake:channel-bukkit") using project(":channel-bukkit")
      substitute module("de.timesnake:channel-api") using project(":channel-api")

      substitute module("de.timesnake:library-packets") using project(":library-packets")
      substitute module("de.timesnake:library-entities") using project(":library-entities")

      substitute module("de.timesnake:library-network") using project(":library-network")
      substitute module("de.timesnake:library-commands") using project(":library-commands")
      substitute module("de.timesnake:library-permissions") using project(":library-permissions")
      substitute module("de.timesnake:library-basic") using project(":library-basic")
      substitute module("de.timesnake:library-chat") using project(":library-chat")
    }
  }
}

tasks {
  jar {
    dependsOn(reobfJar)
  }

  compileJava {
    options.encoding = "UTF-8"
    options.release.set(17)
  }

  javadoc {
    options.encoding = "UTF-8"
  }

  processResources {
    filteringCharset = "UTF-8"
    var props = [
        "name"      : project.name,
        "version"   : project.version,
        "apiVersion": "1.20.1"
    ]
    inputs.properties(props)
    filesMatching("plugin.yml") {
      expand(props)
    }
  }
}

tasks.register('exportAsPlugin', Copy) {
  from "$buildDir/libs/${archivesBaseName}-${project.version}.jar"
  into "${timesnakePluginDir}"

  dependsOn(assemble)
}

publishing {
  repositories {
    maven {
      url "https://git.timesnake.de/api/v4/projects/" + projectId + "/packages/maven"
      credentials(HttpHeaderCredentials) {
        name = "Job-Token"
        value = System.getenv("CI_JOB_TOKEN")
      }
      authentication {
        header(HttpHeaderAuthentication)
      }
    }
  }

  publications {
    mavenJava(MavenPublication) {
      from components.java

      artifact "$buildDir/libs/${archivesBaseName}-${project.version}.jar"
    }
  }
}

tasks.withType(JavaCompile).configureEach {
  options.encoding = 'UTF-8'
}

java {
  withSourcesJar()
}

test {
  useJUnitPlatform()
}
